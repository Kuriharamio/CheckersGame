#ifndef COMPUTER_H
#define COMPUTER_H

#include <Qvector>

#include <array>


#include <QRandomGenerator>
#include <qalgorithms.h>

#include "chess.h"
#include "rule.h"


enum{
    PICK,
    PUT
};



class Computer
{
public:
    Computer();
    Rule rule;


    int dr[12] = { -2 , -1 , 0 , 0 , 2 , 1,  -2 , -1 , 2 , 1 , 0 , 0 };
    int dc[12] = {  0 ,  0 , 2 , 1, -2 , -1 ,  2 , 1 ,  0 , 0, -2 , -1};

    int RED_GREEN_VALUE[17][17] =
        {
            { 0,	 0,		 0,		0,		114,  0,	    0,		0,	   0,		0,		0,		0,		0,		0,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		107,  107,	 0,		0,     0,   	0,		0,		0,		0,		0,		 0,	  0,	    0 },
            { 0,	 0,		 0,		0,		100,  100,	100,	    0,	   0,		0,		0,   	0,		0,		0,		 0,	  0,	    0 },
            { 0,	 0,		 0,		0,		94,   93,	93,	   94,     0,		0,		0,		0,		0,		0,		 0,	  0,		0 },
            { -40,	 -28,	 -16,	-4,		78,	  80,	 80,	80,    78,		-4,		-16,   -28,	   -40,	    0,		0,	  0,		0 },
            { 0,	 -30,	 -18,	-6, 	68,	  70,	 72,	72,    70,	   68,		-6,    -18,	   -30,		0,		0,	  0,		0 },
            { 0,	 0,		 -20,	-8,	    58,	  60,	 62,	62,    62,	   60,		58,	    -8,	   -20,		0,		0,	  0,		0 },
            { 0,	 0,		 0,		-10,	48,	  50,	 52,	52,    52,	   52,		50,		48,	   -10,		0,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		38,	  40,	 42,	42,	   42, 	   42,		42,		40,		38,		0,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		-4,	  28,	 30,	32,    32,     32,		32,		30,		28,		-4,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		-16,  -6,	 18,	20,    22,	   22,		22,		20,		18,		-6,	   -16,   0,	    0 },
            { 0,	 0,		 0,		0,	   -28,  -18,	 -8,	8,     10, 	   12,		12,		10,		8,   	-8 ,	-18,  -28,		0 },
            { 0,	 0,		 0,		0,	   -40,  -30,	 -20,	-10,   -2,		0,		0,		0,		-2,	    -10,    -20,  -30,	  -40 },
            { 0,	 0,		 0,		0,		0,	  0,	 0,		0, 	   0,   	-13,    -13,    -13,   -13,    0,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		0,	  0,	 0,		0, 	   0,		0,	    -26,     -26,	  -26,  	0,		0,	  0,		0 },
            { 0,	 0,		 0,		0,		0,	  0,	 0,		0, 	   0,		0,		0,	   -39,	    -39,	    0,		0,	  0,	    0 },
            { 0,	 0,		 0,		0,		0,	  0,	 0,		0,     0,		0,		0,		0,	   -52,  	0,		0,	  0,		0 }

    };

    int BLUE_ORANGE_VALUE[17][17] =
        {
            { 0,	 0,		 0,		0,		-40,        0,       0,		    0,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-30,        -28,     0,		    0,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-20,        -18,    -16,	    0,	   0,		0,		0,		0,		0,		0,		0,	  0,	        0 },
            { 0,	 0,		 0,		0,		-10,        -8,     -6,		    -4,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { -52,	 -39,	-26,	-13,	-2,          8,     18,		    28,	   38,	  -10,		-20,	-30,   -40,		0,		0,	  0,		    0 },
            { 0,	 -39,	-26,	-13,	0,           10,     20,		30,	   40,		48,		-8,		-18,	-28,	0,		0,	  0,		    0 },
            { 0,	 0,		-26,	-13,	0,           12,     22,		32,	   42,		50,		58,		-6,		-16,	0,		0,	  0,		    0 },
            { 0,	 0,		 0,	    -13,	0,           12,     22,		32,	   42,		52,		60,		68,		-4,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,	    0,	    -2,          10,     22,		32,	   42,		52,		62,		70,		78,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-10,         8,      20,		32,	   42,		52,		62,		72,		80,		94,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-20,         -8,     18,		30,	   42,		52,		62,		72,		80,		93,	  100,	  0,		    0 },
            { 0,	 0,		 0,		0,		-30,        -18,     -6,	    28,	   40,		50,		60,		70,		80,		93,	  100,	  107,		    0 },
            { 0,	 0,		 0,		0,		-40,        -28,     -16,	   -4,	   38,		48,		58,		68,		78,		94,	  100,	  107,		    114 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		-10,	-8,		-6,		-4,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		-20,	-18,   -16,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		0,		-30,    -28,    0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		0,		0,	   -40,		0,		0,	  0,		    0 }

    };

    int PURPLE_YELLOW_VALUE[17][17] =
        {
            { 0,	 0,		 0,		0,		-40,        0,       0,		    0,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-30,        -28,     0,		    0,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-20,        -18,    -16,	    0,	   0,		0,		0,		0,		0,		0,		0,	  0,	        0 },
            { 0,	 0,		 0,		0,		-10,        -8,     -6,		    -4,	   0,		0,		0,		0,		0,		0,		0,	  0,		    0 },
            { -40,	 -28,	-16,	-4 ,	38,          48,     58,		68,	   78,	   94,		100,	107,    114,		0,		0,	  0,		 0 },
            { 0,	 -30,	-18,	-6,	    28,          40,     50,		60,	   70,		80,		93,		100,	107,	0,		0,	  0,		    0 },
            { 0,	 0,		-20,	-8,	    18,          30,     42,		52,	   62,		72,		80,		93,		100,	0,		0,	  0,		    0 },
            { 0,	 0,		 0,	    -10,	8,           20,     32,		42,	   52,		62,		72,		80,		94,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,	    0,	    -2,          10,     22,		32,	   42,		52,		62,		70,		78,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-13,         0,      12,		22,	   32,		42,		52,		60,		68,		-4,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		-26,         -13,     0,		12,	   22,		32,		42,		50,		58,		-6,	  -16,	  0,		    0 },
            { 0,	 0,		 0,		0,		-39,        -26,     -13,	    0,	   10,		20,		30,		40,		48,		-8,	  -18,	  -28,		    0 },
            { 0,	 0,		 0,		0,		-52,        -39,     -26,	   -13,	   -2,		8,		18,		28,		38,	   -10,   -20,	  -30,		  -40 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		-10,	-8,		-6,		-4,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		-20,	-18,   -16,		0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		0,		-30,    -28,    0,		0,	  0,		    0 },
            { 0,	 0,		 0,		0,		0,           0,     0,		    0,	   0,		0,		0,		0,	   -40,		0,		0,	  0,		    0 }

    };

    std::pair<int,int> SerachMove(Chess ChessBoard[17][17], int visited[17][17] , int raw , int col);
    std::array<int,5> FindDeeply(Chess ChessBoard[17][17], Color color_self, Color color_oppo, int level,int depth);
    std::array<int, 5> ComputersMove(Chess ChessBoard[17][17], Color color, int level);
    int EvaluateBoard(int raw, int col, Color color);
    std::vector<std::pair<int, int>> FindSelectPosition(Chess ChessBoard[17][17], Color color);
    std::array<int,4> ComputersMove(Chess ChessBoard[17][17], Color color, int level, int Operated);

    Color turnStringToColor(QString color);
    int turnStringToDifficulty(QString difficulty);

    int getBegin_x() const;
    void setBegin_x(int begin_x);

    int getBegin_y() const;
    void setBegin_y(int begin_y);

    int getDestin_x() const;
    void setDestin_x(int destin_x);

    int getDestin_y() const;
    void setDestin_y(int destin_y);

    int getStatus() const;
    void setStatus(int status);

private:
    int Begin_x;
    int Begin_y;
    int Destin_x;
    int Destin_y;
    int Status;
};

#endif // COMPUTER_H
